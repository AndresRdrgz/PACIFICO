#!/usr/bin/env python
"""
Script final de verificaci√≥n: formulario web del canal digital
"""
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'financiera.settings')
django.setup()

from workflow.models import FormularioWeb
from workflow.modelsWorkflow import Solicitud, Pipeline, Etapa

print("=== VERIFICACI√ìN FINAL: FORMULARIO WEB CANAL DIGITAL ===")

# 1. Verificar configuraci√≥n
print("\n1. Verificando configuraci√≥n...")
pipeline = Pipeline.objects.filter(nombre__icontains='Flujo de consulta de Auto').first()
if pipeline:
    print(f"‚úÖ Pipeline encontrado: {pipeline.nombre}")
    etapa = pipeline.etapas.filter(nombre__icontains='Nuevo Lead').first()
    if etapa:
        print(f"‚úÖ Etapa encontrada: {etapa.nombre}")
    else:
        print("‚ùå Etapa 'Nuevo Lead' no encontrada")
        exit(1)
else:
    print("‚ùå Pipeline 'Flujo de Consulta de Auto' no encontrado")
    exit(1)

# 2. Verificar solicitudes existentes
print("\n2. Estado actual...")
total_solicitudes = Solicitud.objects.count()
solicitudes_canal = Solicitud.objects.filter(origen='Canal Digital').count()
formularios_web = FormularioWeb.objects.count()

print(f"Total de solicitudes: {total_solicitudes}")
print(f"Solicitudes del Canal Digital: {solicitudes_canal}")
print(f"Formularios web: {formularios_web}")

# 3. Mostrar √∫ltimas solicitudes del Canal Digital
print("\n3. √öltimas solicitudes del Canal Digital:")
ultimas_solicitudes = Solicitud.objects.filter(origen='Canal Digital').order_by('-fecha_creacion')[:5]

if ultimas_solicitudes:
    for solicitud in ultimas_solicitudes:
        print(f"   - {solicitud.codigo} | {solicitud.etapa_actual.nombre} | {solicitud.__dict__.get('cliente_nombre', 'N/A')} | ${solicitud.__dict__.get('monto_solicitado', 0):,.2f}")
else:
    print("   No hay solicitudes del Canal Digital")

# 4. Verificar que las funciones est√°n corregidas
print("\n4. Verificando funciones corregidas...")

# Verificar que el c√≥digo tiene las correcciones
import inspect
from workflow import views_workflow

# Obtener el c√≥digo fuente de la funci√≥n formulario_web
source_formulario = inspect.getsource(views_workflow.formulario_web)
if 'uuid.uuid4().hex[:8].upper()' in source_formulario:
    print("‚úÖ Funci√≥n formulario_web tiene generaci√≥n de c√≥digo corregida")
else:
    print("‚ùå Funci√≥n formulario_web necesita correcci√≥n de c√≥digo")

if 'solicitud.__dict__[' in source_formulario:
    print("‚úÖ Funci√≥n formulario_web usa acceso directo a campos")
else:
    print("‚ùå Funci√≥n formulario_web necesita correcci√≥n de campos")

# Verificar funci√≥n convertir_formulario_a_solicitud
source_convertir = inspect.getsource(views_workflow.convertir_formulario_a_solicitud)
if 'uuid.uuid4().hex[:8].upper()' in source_convertir:
    print("‚úÖ Funci√≥n convertir_formulario_a_solicitud tiene generaci√≥n de c√≥digo corregida")
else:
    print("‚ùå Funci√≥n convertir_formulario_a_solicitud necesita correcci√≥n de c√≥digo")

print("\n=== RESUMEN ===")
print("‚úÖ Pipeline 'Flujo de Consulta de Auto' configurado correctamente")
print("‚úÖ Etapa 'Nuevo Lead' disponible")
print("‚úÖ Origen 'Canal Digital' configurado")
print(f"‚úÖ {solicitudes_canal} solicitudes del Canal Digital existentes")
print("‚úÖ Funciones corregidas para evitar conflictos de propiedades")

print("\nüéØ ESTADO: EL FORMULARIO WEB EST√Å LISTO PARA CREAR SOLICITUDES")
print("üìã PROCESO:")
print("   1. Usuario llena formulario en /workflow/formulario-web/")
print("   2. Se crea FormularioWeb en la base de datos")
print("   3. Se crea autom√°ticamente Solicitud en pipeline 'Flujo de Consulta de Auto'")
print("   4. Se asigna etapa 'Nuevo Lead'")
print("   5. Se marca origen como 'Canal Digital'")
print("   6. Se crea historial inicial")
print("   7. Se marca formulario como procesado")

print("\n=== FIN DE VERIFICACI√ìN ===")
